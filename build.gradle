plugins {
    id 'pmd'
    id 'groovy'
    id 'java-library'
    id "com.github.spotbugs" version "4.7.1"
    id "com.diffplug.spotless" version "6.1.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

apply from: "$rootDir/tasks/revisions.gradle"

allprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    repositories {

        maven {
            url 'https://repo.spring.io/milestone'
        }
        maven {
            url 'https://repo.spring.io/release'
        }

        mavenLocal()
        mavenCentral()
        maven {
            url "https://maven.pkg.github.com/sunshower-io/sunshower-env"
            credentials {
                username "$mavenRepositoryUsername"
                password "$mavenRepositoryPassword"
            }
        }
    }


    dependencyManagement {
        imports {
            mavenBom "io.sunshower.arcus:bom-imported:$version"
        }
    }


}

subprojects {
    apply plugin: 'pmd'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'java-library'
    apply plugin: "com.github.spotbugs"
    apply plugin: "com.diffplug.spotless"

    spotbugsMain {
        reports {
            html {
                enabled = true
            }
        }
    }

    spotbugsTest {
        enabled = false
    }


    pmd {
        toolVersion = '6.34.0'
        sourceSets = [sourceSets.main]
        ruleSets = [
                "${project.rootDir}/check/pmd/rules/errorprone.xml"
        ]
    }

    test {
        useJUnitPlatform()
    }

    spotless {
        java {
            googleJavaFormat('1.12.0')
        }
    }

    sourceSets {
        benchmarks {
            java {
//                compileClasspath += sourceSets.test.runtimeClasspath
//                runtimeClasspath += sourceSets.test.runtimeClasspath
            }
        }
    }

    spotbugsBenchmarks {
        enabled = false
    }

    publishing {

        repositories {
            mavenLocal()

            maven {
                credentials {
                    username "$mavenRepositoryUsername"
                    password "$mavenRepositoryPassword"
                }
                url "$mavenRepositoryUrl"
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }

        task testJar(type: Jar) {
            archiveClassifier = 'tests'
            from sourceSets.test.output
        }

        task javadocJar(type: Jar) {
            from javadoc
            archiveClassifier = 'javadoc'
        }

        task runBenchmarks(type: Test) {
            description = "Run Arcus Benchmarks"
            classpath = sourceSets.benchmarks.runtimeClasspath
            testClassesDirs = sourceSets.benchmarks.output.classesDirs
        }

        publications {

            pluginMaven(MavenPublication) {

                /**
                 * components source
                 */
                from components.java

                /**
                 * maven coordinates
                 */
                groupId = project.group
                version = project.version
                artifactId = project.name

                /**
                 * included artifacts
                 */

                artifact testJar
                artifact sourcesJar
                artifact javadocJar

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'Sunshower Arcus'
                    description = 'Sunshower Core Libraries'
                    url = 'https://github.com/sunshower-io/sunshower-arcus'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'josiah'
                            name = 'Josiah Haswell'
                            email = 'josiah@sunshower.io'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/sunshower-io/sunshower-arcus.git'
                        developerConnection = 'scm:git:ssh://github.com/sunshower-io/sunshower-arcus.git'
                        url = 'https://www.sunshower.io/'
                    }
                }
            }

        }

    }


    signing {
        useGpgCmd()
        sign publishing.publications.pluginMaven
    }



    dependencies {
        compileOnly 'com.google.code.findbugs:annotations'
        testCompileOnly 'com.google.code.findbugs:annotations'


        [
                'jmh-core',
                'jmh-generator-annprocess'
        ].each {
            benchmarksImplementation "org.openjdk.jmh:$it"
            benchmarksAnnotationProcessor "org.openjdk.jmh:$it"
        }

        benchmarksImplementation sourceSets.main.output

        [
                'org.projectlombok:lombok'
        ].each { dependency ->
            compileOnly dependency
            testCompileOnly dependency
            annotationProcessor dependency
            testAnnotationProcessor dependency
            benchmarksCompileOnly dependency
            benchmarksAnnotationProcessor dependency

            plugins.withType(JavaTestFixturesPlugin) {
                testFixturesImplementation dependency
                testFixturesAnnotationProcessor dependency
            }
        }


        [
                'org.spockframework:spock-core',
                'org.junit-pioneer:junit-pioneer',
                'org.mockito:mockito-junit-jupiter',
                'org.junit.platform:junit-platform-suite-engine',


                'org.mockito:mockito-inline',
                'org.junit-pioneer:junit-pioneer',
                'org.junit.jupiter:junit-jupiter-params'
        ].each { dependency ->
            testImplementation dependency
            benchmarksImplementation dependency
            plugins.withType(JavaTestFixturesPlugin) {
                testFixturesImplementation dependency
            }
        }

        [
                'api',
                'engine'

        ].each { dependency ->

            testImplementation "org.junit.jupiter:junit-jupiter-$dependency"
            testImplementation "org.junit.platform:junit-platform-suite-$dependency"
            plugins.withType(JavaTestFixturesPlugin) {
                testFixturesImplementation "org.junit.jupiter:junit-jupiter-$dependency"
                testFixturesImplementation "org.junit.platform:junit-platform-suite-$dependency"
            }
        }


    }
}


defaultTasks(
        'clean',
        'build',
        'spotlessApply'
)
